{"version":3,"file":"static/js/src_shared_components_payment_StripeNative_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA","sources":["/home/runner/work/kudos-league.github.io/kudos-league.github.io/src/shared/components/payment/DonationAmountPicker.tsx","/home/runner/work/kudos-league.github.io/kudos-league.github.io/src/shared/components/payment/StripeNative.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text } from \"react-native\";\nimport { useController, useFormContext } from \"react-hook-form\";\nimport Input from \"shared/components/forms/input\";\nimport Picker from \"shared/components/forms/picker\";\n\ntype DonationAmountPickerProps = {\n  onAmountChange: (amount: number) => void;\n};\n\nconst predefinedAmounts = [\n  { label: \"$5\", value: \"500\" },\n  { label: \"$10\", value: \"1000\" },\n  { label: \"$20\", value: \"2000\" },\n  { label: \"$50\", value: \"5000\" },\n];\n\nexport default function DonationAmountPicker({\n  onAmountChange,\n}: DonationAmountPickerProps) {\n  const formMethods = useFormContext();\n\n  if (!formMethods) {\n    throw new Error(\"DonationAmountPicker must be used within a FormProvider\");\n  }\n\n  const { control } = formMethods;\n  const { field } = useController({\n    name: \"donationAmount\",\n    control,\n    defaultValue: \"\",\n  });\n\n  const [customAmount, setCustomAmount] = useState(\"\");\n\n  const handlePickerChange = (value: string) => {\n    const amount = parseInt(value, 10);\n    onAmountChange(amount);\n    field.onChange(value);\n    setCustomAmount(\"\");\n  };\n\n  const handleCustomAmountChange = (value: string) => {\n    const numericValue = parseInt(value, 10) || 0;\n    setCustomAmount(value);\n    onAmountChange(numericValue * 100);\n    field.onChange((numericValue * 100).toString());\n  };\n\n  return (\n    <View style={{ padding: 10 }}>\n      <Text style={{ fontSize: 16, marginBottom: 8 }}>\n        Select Donation Amount:\n      </Text>\n\n      <Picker\n        name=\"donationAmount\"\n        form={formMethods}\n        options={predefinedAmounts}\n        onValueChange={handlePickerChange}\n      />\n\n      <Text style={{ marginVertical: 8 }}>Or Enter Custom Amount:</Text>\n\n      <Input\n        name=\"customDonationAmount\"\n        label=\"Custom Amount\"\n        placeholder=\"Enter amount in dollars\"\n        form={formMethods}\n        value={customAmount}\n        keyboardType=\"numeric\"\n        onChangeText={handleCustomAmountChange}\n      />\n    </View>\n  );\n}\n","import { StripeProvider, useStripe } from \"@stripe/stripe-react-native\";\nimport { useState, useEffect } from \"react\";\nimport { Button, View, Text, StyleSheet, Alert } from \"react-native\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport DonationAmountPicker from \"./DonationAmountPicker\";\n\nexport default function StripeNative() {\n  const { initPaymentSheet, presentPaymentSheet } = useStripe();\n  const [publishableKey, setPublishableKey] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [donationAmount, setDonationAmount] = useState(500);\n\n  const formMethods = useForm();\n\n  const fetchPaymentSheetParams = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.BACKEND_URI}/stripe/payment-sheet`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ amount: donationAmount }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n\n      const { paymentIntent, ephemeralKey, customer, publishableKey } =\n        await response.json();\n      setPublishableKey(publishableKey);\n      return { paymentIntent, ephemeralKey, customer };\n    } catch (err) {\n      console.error(\"Failed to fetch payment sheet parameters:\", err);\n      setError(\"Failed to load payment details. Please try again.\");\n      return null;\n    }\n  };\n\n  const initializePaymentSheet = async () => {\n    const params = await fetchPaymentSheetParams();\n    if (!params) return;\n\n    const { paymentIntent, ephemeralKey, customer } = params;\n    const { error } = await initPaymentSheet({\n      paymentIntentClientSecret: paymentIntent,\n      customerId: customer,\n      customerEphemeralKeySecret: ephemeralKey,\n      merchantDisplayName: \"Your Business Name\",\n      allowsDelayedPaymentMethods: true,\n    });\n\n    if (error) {\n      setError(`Initialization error: ${error.message}`);\n      console.error(\"Error in initPaymentSheet:\", error);\n    } else {\n      setLoading(true);\n    }\n  };\n\n  const openPaymentSheet = async () => {\n    const { error } = await presentPaymentSheet();\n    if (error) {\n      Alert.alert(`Payment failed: ${error.message}`);\n      console.warn(\"Error with presentPaymentSheet:\", error);\n    } else {\n      Alert.alert(\"Thank you for your donation!\");\n    }\n  };\n\n  useEffect(() => {\n    initializePaymentSheet();\n  }, []);\n\n  return (\n    <StripeProvider publishableKey={publishableKey || \"\"}>\n      <FormProvider {...formMethods}>\n        <View style={styles.container}>\n          {error && <Text style={styles.errorText}>{error}</Text>}\n          <Text style={styles.headerText}>Support Us with a Donation</Text>\n          <DonationAmountPicker onAmountChange={setDonationAmount} />\n          <Button\n            title=\"Donate\"\n            disabled={!loading}\n            onPress={openPaymentSheet}\n          />\n        </View>\n      </FormProvider>\n    </StripeProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n  headerText: { fontSize: 24, fontWeight: \"bold\", marginBottom: 20 },\n  errorText: { color: \"red\", marginBottom: 10 },\n});\n"],"names":[],"sourceRoot":""}