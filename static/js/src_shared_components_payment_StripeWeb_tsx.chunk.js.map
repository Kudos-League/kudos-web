{"version":3,"file":"static/js/src_shared_components_payment_StripeWeb_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACjsources":["/home/runner/work/kudos-league.github.io/kudos-league.github.io/src/shared/components/payment/DonationAmountPicker.tsx","/home/runner/work/kudos-league.github.io/kudos-league.github.io/src/shared/components/payment/StripeWeb.tsx","/home/runner/work/kudos-league.github.io/kudos-league.github.io/node_modules/@stripe/stripe-js/dist/index.mjs","/home/runner/work/kudos-league.github.io/kudos-league.github.io/node_modules/@stripe/stripe-js/lib/index.mjs"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text } from \"react-native\";\nimport { useController, useFormContext } from \"react-hook-form\";\nimport Input from \"shared/components/forms/input\";\nimport Picker from \"shared/components/forms/picker\";\n\ntype DonationAmountPickerProps = {\n  onAmountChange: (amount: number) => void;\n};\n\nconst predefinedAmounts = [\n  { label: \"$5\", value: \"500\" },\n  { label: \"$10\", value: \"1000\" },\n  { label: \"$20\", value: \"2000\" },\n  { label: \"$50\", value: \"5000\" },\n];\n\nexport default function DonationAmountPicker({\n  onAmountChange,\n}: DonationAmountPickerProps) {\n  const formMethods = useFormContext();\n\n  if (!formMethods) {\n    throw new Error(\"DonationAmountPicker must be used within a FormProvider\");\n  }\n\n  const { control } = formMethods;\n  const { field } = useController({\n    name: \"donationAmount\",\n    control,\n    defaultValue: \"\",\n  });\n\n  const [customAmount, setCustomAmount] = useState(\"\");\n\n  const handlePickerChange = (value: string) => {\n    const amount = parseInt(value, 10);\n    onAmountChange(amount);\n    field.onChange(value);\n    setCustomAmount(\"\");\n  };\n\n  const handleCustomAmountChange = (value: string) => {\n    const numericValue = parseInt(value, 10) || 0;\n    setCustomAmount(value);\n    onAmountChange(numericValue * 100);\n    field.onChange((numericValue * 100).toString());\n  };\n\n  return (\n    <View style={{ padding: 10 }}>\n      <Text style={{ fontSize: 16, marginBottom: 8 }}>\n        Select Donation Amount:\n      </Text>\n\n      <Picker\n        name=\"donationAmount\"\n        form={formMethods}\n        options={predefinedAmounts}\n        onValueChange={handlePickerChange}\n      />\n\n      <Text style={{ marginVertical: 8 }}>Or Enter Custom Amount:</Text>\n\n      <Input\n        name=\"customDonationAmount\"\n        label=\"Custom Amount\"\n        placeholder=\"Enter amount in dollars\"\n        form={formMethods}\n        value={customAmount}\n        keyboardType=\"numeric\"\n        onChangeText={handleCustomAmountChange}\n      />\n    </View>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { loadStripe, Stripe } from \"@stripe/stripe-js\";\nimport { Button, View, Text, StyleSheet } from \"react-native\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport DonationAmountPicker from \"./DonationAmountPicker\";\n\nexport default function StripeWeb() {\n  const [stripe, setStripe] = useState<Stripe | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [donationAmount, setDonationAmount] = useState(500);\n\n  const formMethods = useForm();\n\n  const fetchPublishableKey = async () => {\n    try {\n      console.log(\n        \"Attempting to fetch publishable key...\",\n        process.env.BACKEND_URI\n      );\n      const response = await fetch(\n        `${process.env.BACKEND_URI}/stripe/publishable-key`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n\n      const { publishableKey } = await response.json();\n      console.log(\"Fetched publishableKey:\", publishableKey);\n      return publishableKey;\n    } catch (err) {\n      console.error(\"Failed to fetch publishable key:\", err);\n      setError(\"Failed to load Stripe publishable key. Please try again.\");\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Initializing Stripe\");\n    const initializeStripe = async () => {\n      try {\n        const publishableKey = await fetchPublishableKey();\n        if (!publishableKey) {\n          throw new Error(\"Publishable key not found\");\n        }\n\n        const stripeInstance = await loadStripe(publishableKey);\n        if (!stripeInstance) {\n          throw new Error(\"Failed to initialize Stripe instance\");\n        }\n\n        console.log(\"Stripe initialized successfully:\", stripeInstance);\n        setStripe(stripeInstance);\n        setLoading(true);\n      } catch (e) {\n        console.error(\"Error in initializeStripe:\", e);\n        setError(\"Failed to initialize Stripe. Please try again later.\");\n      }\n    };\n\n    initializeStripe();\n  }, []);\n\n  const handlePayment = async () => {\n    if (!stripe) return;\n\n    const response = await fetch(\n      `${process.env.BACKEND_URI}/stripe/checkout-session`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ amount: donationAmount }),\n      }\n    );\n\n    const session = await response.json();\n    const { error } = await stripe.redirectToCheckout({\n      sessionId: session.id,\n    });\n    if (error) console.warn(\"Error with redirectToCheckout:\", error);\n  };\n\n  return (\n    <FormProvider {...formMethods}>\n      <View style={styles.container}>\n        {error && <Text>{error}</Text>}\n        <Text style={styles.headerText}>Support Us with a Donation</Text>\n        <DonationAmountPicker onAmountChange={setDonationAmount} />\n        <Button title=\"Donate\" disabled={!loading} onPress={handlePayment} />\n      </View>\n    </FormProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n  headerText: { fontSize: 24, fontWeight: \"bold\", marginBottom: 20 },\n});\n","var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"4.8.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar onErrorListener = null;\nvar onLoadListener = null;\n\nvar onError = function onError(reject) {\n  return function () {\n    reject(new Error('Failed to load Stripe.js'));\n  };\n};\n\nvar onLoad = function onLoad(resolve, reject) {\n  return function () {\n    if (window.Stripe) {\n      resolve(window.Stripe);\n    } else {\n      reject(new Error('Stripe.js not available'));\n    }\n  };\n};\n\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      } else if (script && onLoadListener !== null && onErrorListener !== null) {\n        var _script$parentNode;\n\n        // remove event listeners\n        script.removeEventListener('load', onLoadListener);\n        script.removeEventListener('error', onErrorListener); // if script exists, but we are reloading due to an error,\n        // reload script to trigger 'load' event\n\n        (_script$parentNode = script.parentNode) === null || _script$parentNode === void 0 ? void 0 : _script$parentNode.removeChild(script);\n        script = injectScript(params);\n      }\n\n      onLoadListener = onLoad(resolve, reject);\n      onErrorListener = onError(reject);\n      script.addEventListener('load', onLoadListener);\n      script.addEventListener('error', onErrorListener);\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  }); // Resets stripePromise on error\n\n  return stripePromise[\"catch\"](function (error) {\n    stripePromise = null;\n    return Promise.reject(error);\n  });\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar stripePromise$1;\nvar loadCalled = false;\n\nvar getStripePromise = function getStripePromise() {\n  if (stripePromise$1) {\n    return stripePromise$1;\n  }\n\n  stripePromise$1 = loadScript(null)[\"catch\"](function (error) {\n    // clear cache on error\n    stripePromise$1 = null;\n    return Promise.reject(error);\n  });\n  return stripePromise$1;\n}; // Execute our own script injection after a tick to give users time to do their\n// own script injection.\n\n\nPromise.resolve().then(function () {\n  return getStripePromise();\n})[\"catch\"](function (error) {\n  if (!loadCalled) {\n    console.warn(error);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now(); // if previous attempts are unsuccessful, will re-load script\n\n  return getStripePromise().then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n","export * from '../dist/index.mjs';\n"],"names":[],"sourceRoot":""}